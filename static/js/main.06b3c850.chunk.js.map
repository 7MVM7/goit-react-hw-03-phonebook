{"version":3,"sources":["Components/ContactsForm/ContactsForm.styled.jsx","Components/ContactsForm/ContactsForm.jsx","Components/Filter/Filter.styled.jsx","Components/Filter/Filter.jsx","Components/ContactsList/ContactsList.styled.jsx","Components/ContactsList/ContactsList.jsx","Components/App.jsx","index.js"],"names":["MyForm","styled","form","ContactsForm","state","name","number","change","e","currentTarget","value","setState","submit","preventDefault","props","onHandleSubmit","reset","this","onSubmit","onChange","type","placeholder","pattern","title","required","Component","MyLabel","label","Filter","filtered","MyList","ul","ContactsList","contacts","deleteContact","map","id","className","onClick","App","filter","onHandleSubmitContact","addContact","uuidv4","some","contact","toLowerCase","alert","onDeleteContact","prev","item","changeFilterInput","target","onFilteredContacts","trim","includes","localStorage","getItem","parsedContacts","JSON","parse","prevProps","prevState","setItem","stringify","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.06b3c850.chunk.js","sourcesContent":["import styled from '@emotion/styled';\nexport const MyForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  margin-left: auto;\n    margin-right: auto;\n  width: 310px;\n  height: 250px;\n  border: 2px solid darkgrey;\n  border-radius: 5px;\n  padding: 15px;\n  background-color: snow;\n\n label{\n\n\n  display: flex;\n  flex-direction: column;\n  font-size: 18px;\n  font-weight: 600;\n  line-height: 1.18;\n}\ninput{\n  padding: 10px;\n  border: 2px solid #00e45f;\n  border-radius: 15px;\n  font-size: 18px;\n  font-weight: 500;\n  width: 250px;\n  font-size: 14px;\n  margin-top: 10px;\n  margin-bottom: 20px;\n}\n  button{\n    \n    margin-left: auto;\n    margin-right: auto;\n  font-size: 16px;\n  width: 150px;\n  padding: 4px;\n  border: 2px solid darkgrey;\n  border-radius: 4px;\n  background-color: darkgrey;\n  margin-top: 20px;\n  cursor: pointer;\n}\n`\n\n\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { MyForm } from \"./ContactsForm.styled\";\n\nexport default class ContactsForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n  change = (e) => {\n    const { name, value } = e.currentTarget;\n    this.setState({ [name]: value });\n  };\n  submit = (e) => {\n    e.preventDefault();\n    this.props.onHandleSubmit(this.state);\n    this.reset();\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <MyForm onSubmit={this.submit}>\n        <label>\n          Name\n          <input\n            onChange={this.change}\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            placeholder=\"Enter your name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n          Number\n        </label>\n\n        <label>\n          <input\n            onChange={this.change}\n            placeholder=\"Enter your phone number\"\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n        <button type=\"submit\">Add contact</button>\n      </MyForm>\n    );\n  }\n}\n\nContactsForm.propTypes = {\n  onHandleSubmit: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\nexport const MyLabel = styled.label`\n\n  display: flex;\n  flex-direction: column;\n  font-family: \"Arial\";\n  font-weight: 700;\n  font-size: 15px;\n  line-height: 1.14;\n  margin-top: 15px;\n  margin-left: 20px;\n\n    input{\n      \n  width: 300px;\n  border: 4px solid #00ffe5;\n  border-radius: 15px ;\n\n  padding: 8px;\n  margin-top: 8px;\n}\n`","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { MyLabel } from \"./Filter.styled\";\nconst Filter = ({ filtered, value }) => {\n  return (\n    <MyLabel>\n      Find contacts by name\n      <input type=\"text\" name=\"filter\" value={value} onChange={filtered} />\n    </MyLabel>\n  );\n};\n\nFilter.propTypes = {\n  filtered: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n\nexport default Filter;\n","import styled from '@emotion/styled';\nexport const MyList = styled.ul`\npadding: 0;\n    .contact {\n      margin-left: 20px;\n\n  display: flex;\n  align-items: center;\n  font-size: 15px;\n  font-weight: 400;\n  line-height: 1.18;\n  margin-bottom: 8px;\n}\n.buttonDelete {\n  \n  margin-left: 10px;\n  border: 2px solid red;\n  font-size: 13px;\n  font-weight: 700;\n  border-radius: 4px;\n  background-color: #ffae00;\n  color: black;\n  cursor: pointer;\n}\n\n`","import React from \"react\";\n\nimport PropTypes from \"prop-types\";\nimport { MyList } from \"./ContactsList.styled\";\nconst ContactsList = ({ contacts, deleteContact }) => {\n  return (\n    <MyList>\n      {contacts.map(({ name, number, id }) => (\n        <li className=\"contact\" key={id}>\n          <p>\n            {name}: {number}\n          </p>\n          <button\n            className=\"buttonDelete\"\n            type=\"button\"\n            onClick={() => deleteContact(id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </MyList>\n  );\n};\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      number: PropTypes.string,\n      id: PropTypes.string,\n    })\n  ),\n  deleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactsList;\n","import React, { Component } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport ContactsForm from \"./ContactsForm/ContactsForm\";\nimport Filter from \"./Filter/Filter\";\nimport ContactsList from \"./ContactsList/ContactsList\";\n\nexport default class App extends Component {\n  state = {\n    contacts: [\n      { name: \"Vlad\", number: \"+380666506650\", id: \"1\" },\n      { name: \"Yans\", number: \"+380633590900\", id: \"2\" },\n      { name: \"Bob\", number: \"+38050077789\", id: \"3\" },\n      { name: \"CIA\", number: \"+16102347212\", id: \"4\" },\n    ],\n    filter: \"\",\n  };\n\n  onHandleSubmitContact = ({ name, number }) => {\n    const addContact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n\n    this.state.contacts.some(\n      (contact) => contact.name.toLowerCase() === addContact.name.toLowerCase()\n    )\n      ? alert(`${name} is already in contacts`)\n      : this.setState(({ contacts }) => ({\n          contacts: [addContact, ...contacts],\n        }));\n  };\n\n  onDeleteContact = (id) => {\n    this.setState((prev) => ({\n      contacts: prev.contacts.filter((item) => item.id !== id),\n    }));\n  };\n\n  changeFilterInput = (e) => {\n    this.setState({ filter: e.target.value });\n  };\n\n  onFilteredContacts = () => {\n    const { filter, contacts } = this.state;\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().trim().includes(filter.toLowerCase().trim())\n    );\n  };\n\n  componentDidMount() {\n    const contacts = localStorage.getItem(\"contacts\");\n    const parsedContacts = JSON.parse(contacts);\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n\n  render() {\n    const { filter } = this.state;\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactsForm onHandleSubmit={this.onHandleSubmitContact} />\n\n        <h2>Contacts</h2>\n        <Filter value={filter} filtered={this.changeFilterInput} />\n        <ContactsList\n          deleteContact={this.onDeleteContact}\n          contacts={this.onFilteredContacts()}\n        />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Components/App.jsx\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}